import com.squareup.kotlinpoet.*
import java.io.File
import java.text.SimpleDateFormat
import java.util.*
import java.util.Date

buildscript {
    repositories { mavenCentral() }

    dependencies { classpath("com.squareup:kotlinpoet:" + properties["kotlinPoetVersion"]) }
}

val currentDateAndTime = Date()
val formatter = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
val formattedDateAndTime = formatter.format(currentDateAndTime)

/**
 * Goes through RestAPIMethods folder and generates a getter for every interface and puts it in the
 * interface RestAPIMethodGetters and then implement the interface in RestAPIMethodGetterImpl.
 * Generate all this in the build folder with the path io/ydwk/yde/api/rest/methods
 */
fun generateRestAPIMethodGetters() {
    val fileContaingAllRestAPIMethods =
        File(projectDir, "src/main/kotlin/io/github/ydwk/yde/rest/methods")

    val interfaceNemes = mutableListOf<String>()
    fileContaingAllRestAPIMethods.walk().forEach {
        if (it.isFile && it.name.endsWith(".kt")) {
            val interfaceName = it.name.substring(0, it.name.length - 3)
            interfaceNemes.add(interfaceName)
        }
    }

    val restAPIMethodGettersInterface =
        FileSpec.builder("io.github.ydwk.yde.rest.methods", "RestAPIMethodGetters")
            .addType(
                TypeSpec.interfaceBuilder("RestAPIMethodGetters")
                    .addModifiers(KModifier.PUBLIC)
                    .addAnnotation(
                        AnnotationSpec.builder(Suppress::class).addMember("\"UNUSED\"").build())
                    .addAnnotation(
                        AnnotationSpec.builder(
                                ClassName("javax.annotation.processing", "Generated"))
                            .addMember("\"Generated by YDE\"")
                            .addMember("date = " + "\"$formattedDateAndTime\"")
                            .build())
                    .addFunctions(
                        interfaceNemes.map {
                            FunSpec.builder("get${it}")
                                .addModifiers(KModifier.ABSTRACT)
                                .returns(ClassName("io.github.ydwk.yde.rest.methods", it))
                                .build()
                        })
                    .build())
            .build()

    val restAPIMethodGettersImpl =
        FileSpec.builder("io.github.ydwk.yde.rest.methods", "RestAPIMethodGetterImpl")
            .addType(
                TypeSpec.classBuilder("RestAPIMethodGetterImpl")
                    .addModifiers(KModifier.PUBLIC)
                    .primaryConstructor(
                        FunSpec.constructorBuilder()
                            .addParameter("yde", ClassName("io.github.ydwk.yde", "YDE"))
                            .build())
                    .addAnnotation(
                        AnnotationSpec.builder(Suppress::class).addMember("\"UNUSED\"").build())
                    .addAnnotation(
                        AnnotationSpec.builder(
                                ClassName("javax.annotation.processing", "Generated"))
                            .addMember("\"Generated by YDE\"")
                            .addMember("date = " + "\"$formattedDateAndTime\"")
                            .build())
                    .addProperty(
                        PropertySpec.builder("yde", ClassName("io.github.ydwk.yde", "YDE"))
                            .initializer("yde")
                            .build())
                    .addSuperinterface(
                        ClassName("io.github.ydwk.yde.rest.methods", "RestAPIMethodGetters"))
                    .addFunctions(
                        interfaceNemes.map {
                            FunSpec.builder("get${it}")
                                .addModifiers(KModifier.OVERRIDE)
                                .returns(ClassName("io.github.ydwk.yde.rest.methods", it))
                                .addStatement(
                                    "return %TImpl(yde)",
                                    ClassName("io.github.ydwk.yde.impl.rest.methods", it))
                                .build()
                        })
                    .build())
            .build()

    File("${project.buildDir}/generated/kotlin").apply {
        mkdirs()

        restAPIMethodGettersInterface.writeTo(this)
        restAPIMethodGettersImpl.writeTo(this)
    }
}

task("generateKotlinCode") { generateRestAPIMethodGetters() }
